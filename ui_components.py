import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from config import WASTE_CATEGORIES

def render_header():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ"""
    st.markdown('<h1 class="main-header">üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞</h1>', unsafe_allow_html=True)

def render_waste_info_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞"""
    with st.expander("üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞"):
        st.markdown("""
        <div class="info-box">
        <h4>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ:</h4>
        """, unsafe_allow_html=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞
        cols = st.columns(4)
        for i, (waste_type, info) in enumerate(WASTE_CATEGORIES.items()):
            col_idx = i % 4
            with cols[col_idx]:
                st.markdown(f"""
                <div style="text-align: center; padding: 10px; margin: 5px; border: 2px solid {info['color']}; border-radius: 10px;">
                    <div style="font-size: 2em;">{info['icon']}</div>
                    <strong>{waste_type}</strong><br>
                    <span style="color: {info['color']};">{info['category']}</span><br>
                    <small>{info['recycle']}</small><br>
                    <small>‡∏ñ‡∏±‡∏á{info['bin_color']}</small>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("""
        <h4>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:</h4>
        <ul>
        <li><span class="recyclable">‚ôªÔ∏è ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏î‡πâ:</span> ‡πÅ‡∏¢‡∏Å‡πÉ‡∏™‡πà‡∏ñ‡∏±‡∏á‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á</li>
        <li><span class="organic">üå± ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ:</span> ‡∏ó‡∏≥‡∏õ‡∏∏‡πà‡∏¢‡∏´‡∏°‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏¢‡∏∞‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß</li>
        <li><span class="non-recyclable">‚ö†Ô∏è ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢:</span> ‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏µ‡πÅ‡∏î‡∏á</li>
        <li><span class="general">üóëÔ∏è ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:</span> ‡∏Ç‡∏¢‡∏∞‡πÅ‡∏´‡πâ‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)

def render_sidebar_controls():
    """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á"""
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        return {
            "confidence": st.slider("Confidence Threshold", 0.0, 1.0, 0.5, 0.05),
            "iou": st.slider("IoU Threshold", 0.0, 1.0, 0.45, 0.05),
            "filters": {
                "recyclable": st.checkbox("‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏î‡πâ", value=True),
                "organic": st.checkbox("‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ", value=True),
                "hazardous": st.checkbox("‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", value=True),
                "general": st.checkbox("‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", value=True)
            }
        }

def render_statistics_cards(category_counts, total_detections):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
    with col_stat1:
        st.metric("üóëÔ∏è ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_detections)
    with col_stat2:
        st.metric("‚ôªÔ∏è ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏î‡πâ", category_counts.get("‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏î‡πâ", 0))
    with col_stat3:
        st.metric("üå± ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ", category_counts.get("‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ", 0))
    with col_stat4:
        st.metric("‚ö†Ô∏è ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", category_counts.get("‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", 0))

def render_results_table(results_data):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    st.markdown("#### üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
    results_df = pd.DataFrame(results_data)
    st.dataframe(results_df, use_container_width=True)

def render_charts(class_counts, category_counts):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü"""
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        if len(class_counts) > 1:
            fig1 = px.pie(
                values=[data["count"] for data in class_counts.values()],
                names=[f"{WASTE_CATEGORIES[name]['icon']} {name}" for name in class_counts.keys()],
                title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏ö",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig1.update_layout(height=400)
            st.plotly_chart(fig1, use_container_width=True)
    
    with col_chart2:
        if sum(category_counts.values()) > 0:
            colors = {
                "‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏î‡πâ": "#27AE60",
                "‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏•‡∏≤‡∏¢‡πÑ‡∏î‡πâ": "#8E44AD", 
                "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢": "#E74C3C",
                "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": "#696969"
            }
            
            fig2 = px.bar(
                x=list(category_counts.keys()),
                y=list(category_counts.values()),
                title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                color=list(category_counts.keys()),
                color_discrete_map=colors
            )
            fig2.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig2, use_container_width=True)

def render_recommendations_section(recommendations, eco_score, eco_message):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
    st.markdown("#### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏∞")
    for rec in recommendations:
        st.markdown(f"- {rec}")
    
    # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    st.markdown(f"""
    #### üåç ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
    **{eco_score:.1f}%** ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÑ‡∏î‡πâ
    """)
    
    if eco_score >= 80:
        st.success(eco_message)
    elif eco_score >= 60:
        st.info(eco_message)
    elif eco_score >= 40:
        st.warning(eco_message)
    else:
        st.error(eco_message)

def render_detailed_results(detailed_data):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    with st.expander("üîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô"):
        detailed_df = pd.DataFrame(detailed_data)
        st.dataframe(detailed_df, use_container_width=True)

def render_help_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"):
        st.markdown("""
        ### ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
        1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• .pt ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á
        2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏¢‡∏∞‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö PNG, JPG, JPEG, BMP ‡∏´‡∏£‡∏∑‡∏≠ TIFF
        3. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Confidence ‡πÅ‡∏•‡∏∞ IoU Threshold (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        4. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞"
        5. ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏∞
        
        ### ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•:
        - ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 ‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞ 12 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™: battery, biological, brown-glass, cardboard, clothes, green-glass, metal, paper, plastic, shoes, trash, white-glass
        
        ### ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
        - **Confidence Threshold**: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 0.3-0.7)
        - **IoU Threshold**: ‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 0.4-0.5)
        - ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        
        ### ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•:
        - ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .pt ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
        - ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `models/` ‡∏´‡∏£‡∏∑‡∏≠ `weights/` ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏ß‡πâ
        """)

def render_footer():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢"""
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #7F8C8D;">
        <p>üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞ | Powered by YOLO & Streamlit</p>
        <p>üåç ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡πÅ‡∏¢‡∏Å‡∏Ç‡∏¢‡∏∞‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ</p>
    </div>
    """, unsafe_allow_html=True)